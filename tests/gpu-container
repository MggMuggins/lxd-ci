#!/bin/sh
set -eux

# testflinger_queue: rockman

# Install required components from "restricted" pocket
if ! grep -v '^#' /etc/apt/sources.list | grep -qwFm1 restricted; then
    ARCH="$(dpkg --print-architecture)"
    DISTRO="$(lsb_release -sc)"
    if [ "$ARCH" != "amd64" ]; then
        cat << EOF > /etc/apt/sources.list.d/restricted.list
deb [arch=${ARCH}] http://ports.ubuntu.com/ubuntu-ports ${DISTRO} restricted
deb [arch=${ARCH}] http://ports.ubuntu.com/ubuntu-ports ${DISTRO}-updates restricted
EOF
    else
        cat << EOF > /etc/apt/sources.list.d/restricted.list
deb [arch=${ARCH}] http://archive.ubuntu.com/ubuntu/ ${DISTRO} restricted
deb [arch=${ARCH}] http://archive.ubuntu.com/ubuntu/ ${DISTRO}-updates restricted
EOF
    fi
fi

# Install dependencies
INSTALL_RECOMMENDS=yes install_deps jq nvidia-utils-525 nvidia-driver-525

# Install LXD
install_lxd

# Check that NVIDIA is installed
nvidia-smi

extra_cleanup() {
  lxc delete -f c1
  lxc profile device remove default root
  lxc profile device remove default eth0
  lxc storage delete default
  lxc network delete lxdbr0
}

# Configure LXD
lxc storage create default zfs
lxc profile device add default root disk path=/ pool=default
lxc network create lxdbr0
lxc profile device add default eth0 nic network=lxdbr0 name=eth0

# Consult available resources
total_gpu="$(lxc query /1.0/resources | jq -r '.gpu.total')"
total_nvidia_gpu="$(lxc query /1.0/resources | jq -r '.gpu.cards | .[] | select(.driver == "nvidia") | .pci_address' | wc -l)"
first_card_pci_slot="$(lxc query /1.0/resources | jq -r '.gpu.cards | .[] | select(.driver == "nvidia") | .pci_address' | head -n1)"
first_card_product_id="$(lxc query /1.0/resources | jq -r ".gpu.cards | .[] | select(.pci_address == \"${first_card_pci_slot}\") | .product_id")"
total_nvidia_gpu_with_product_id="$(lxc query /1.0/resources | jq -r ".gpu.cards | .[] | select(.product_id == \"${first_card_product_id}\") | .product_id" | wc -l)"

# Check if available resources are sufficient
[ "${total_gpu}" -gt 1 ]
[ "${total_nvidia_gpu}" -ge 1 ]
[ "${total_nvidia_gpu_with_product_id}" -ge 1 ]

# Launch a test container
echo "==> Launching a test container"
lxc launch ubuntu-daily:22.04 c1
waitInstanceReady c1

# Confirm no GPU
echo "==> Testing with no GPU"
! lxc exec c1 -- ls -lh /dev/dri/ || false

# Validate with one GPU
echo "==> Testing with one GPU"
lxc config device add c1 gpu0 gpu id=0
sleep 1
[ "$(lxc exec c1 -- ls /dev/dri/ | grep -c '^card[0-9]')" = "1" ] || false

# Validate with all remove
echo "==> Testing with no GPU"
lxc config device remove c1 gpu0
sleep 1
[ "$(lxc exec c1 -- ls /dev/dri/ | grep -c '^card[0-9]')" = "0" ] || false

# Validate with all GPUs
echo "==> Testing with all NVIDIA GPUs"
lxc config device add c1 gpus gpu
sleep 1
[ "$(lxc exec c1 -- ls /dev/dri/ | grep -c '^card[0-9]')" = "${total_gpu}" ] || false

# Test nvidia runtime
echo "==> Testing nvidia runtime"
! lxc exec c1 -- nvidia-smi || false
lxc stop c1
lxc config set c1 nvidia.runtime true
lxc start c1
waitInstanceReady c1
lxc exec c1 -- nvidia-smi

# Test with PCI addresses
echo "==> Testing PCI address selection"
lxc config device remove c1 gpus
lxc config device add c1 gpu1 gpu pci="${first_card_pci_slot}"
sleep 1
[ "$(lxc exec c1 -- ls /dev/dri/ | grep -c '^card[0-9]')" = "1" ] || false
lxc exec c1 -- nvidia-smi

# Test with vendor
echo "==> Testing PCI vendor selection"
lxc config device remove c1 gpu1
lxc config device add c1 gpus gpu vendorid=10de
sleep 1
[ "$(lxc exec c1 -- ls /dev/dri/ | grep -c '^card[0-9]')" = "${total_nvidia_gpu}" ] || false
lxc exec c1 -- nvidia-smi

# Test with vendor and product
echo "==> Testing PCI vendor and product selection"
lxc config device remove c1 gpus
lxc config device add c1 gpus gpu vendorid=10de productid="${first_card_product_id}"
sleep 1
[ "$(lxc exec c1 -- ls /dev/dri/ | grep -c '^card[0-9]')" = "${total_nvidia_gpu_with_product_id}" ] || false
lxc exec c1 -- nvidia-smi

# shellcheck disable=SC2034
FAIL=0
